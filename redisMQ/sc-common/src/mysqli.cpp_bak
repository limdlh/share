#include<stdlib.h>
#include <unistd.h>
#include <mysql/mysql.h>
#include "format.h"
#include "mysqli.h"

const unsigned int default_read_timeout = 60;
#define MYSQL_EXEC_LENTH 1024 

MYSQLResultSet::MYSQLResultSet(MYSQL_RES* mysql_res){
	field_count = 0;
	row_count = 0;
	fields = NULL;
	rows = NULL;
	cursor = -1;

	if (mysql_res == NULL)
		return;

	field_count = mysql_num_fields(mysql_res);
	MYSQL_FIELD *mysql_fields = mysql_fetch_fields(mysql_res);

	fields = new string[field_count];
	for (int i = 0; i < field_count; i++) {
		if (mysql_fields[i].name)
			fields[i] = string(mysql_fields[i].name);
	}

	row_count = mysql_num_rows(mysql_res);
	rows = (string **) malloc(row_count * sizeof(string *));
	for (int i = 0; i < row_count; i++)
		rows[i] = new string[field_count];

	for (int i = 0; i < row_count; i++) {
		MYSQL_ROW mysql_row = mysql_fetch_row(mysql_res);
		for (int j = 0; j < field_count; j++) {
			rows[i][j] = string(mysql_row[j] ? mysql_row[j] : "NULL");
		}
	}
	mysql_free_result(mysql_res);

}

MYSQLI::MYSQLI(string _hostname, unsigned short _port, string _username,
		string _password, string _dbname) :
		eccResultSet(NULL), hostname(_hostname), port(_port), username(
				_username), password(_password), dbname(_dbname) {
	mysql = mysql_init(NULL);
	mysql_options(mysql, MYSQL_OPT_READ_TIMEOUT,
			(const char*) &default_read_timeout);
	mysql_options(mysql, MYSQL_OPT_WRITE_TIMEOUT,
			(const char*) &default_read_timeout);
	if (!mysql_real_connect(mysql, hostname.c_str(), username.c_str(),
			password.c_str(), dbname.c_str(), port, NULL, 0)) {
		fprintf(stderr, "failed to connect to mysql.error=%s\n",
				mysql_error(mysql));
		throw ECCDBException(format("failed to connect to mysql.error=%s\n",mysql_error(mysql)));
		return;
	}
	//mysql_set_character_set(mysql, "gb2312");
	mysql_set_character_set(mysql, "utf8");
	/*
	 MY_CHARSET_INFO cs;
	 mysql_get_character_set_info(mysql,&cs);
	 fprintf(stderr,"Default Character Set of connection:%s\n",mysql_character_set_name(mysql));
	 fprintf(stderr,"Character set information:\n");
	 fprintf(stderr,"character set name:%s\n",cs.name);
	 fprintf(stderr,"collation name: %s\n",cs.csname);
	 fprintf(stderr,"comment:%s\n",cs.comment);
	 fprintf(stderr,"directory: %s\n",cs.dir);
	 */
}

void MYSQLI::ReConnect() {
	//fprintf(stderr,"Mysql server error occurred,try to reconnect..:%s",mysql_error(mysql));
	sleep(1);
	mysql_close(mysql);
	mysql = mysql_init(NULL);
	if (mysql_real_connect(mysql, hostname.c_str(), username.c_str(),
			password.c_str(), dbname.c_str(), port, NULL, 0)) {
		//mysql_set_character_set(mysql, "gb2312");
		mysql_set_character_set(mysql, "utf8");
	} else {
		char cBuff[1024];
		snprintf(cBuff, 1024, "errno=%d,errmsg=%s", mysql_errno(mysql),
				mysql_error(mysql));
		throw ECCDBException(string(cBuff));
	}
}

int MYSQLI::EXEC_UPDATE(string sqlstr) {
	int result = 0;
	result = mysql_query(mysql, sqlstr.c_str());
	if (result != 0) {
		int myerrno = mysql_errno(mysql);
		if (myerrno < 2028 && myerrno > 2000) {
			ReConnect();
			result = mysql_query(mysql, sqlstr.c_str());
		}
	}

	if (result != 0) {
		char cBuff[8192];
		snprintf(cBuff, 8192, "[%s]::Error %d (%s): %s", sqlstr.c_str(),
				mysql_errno(mysql), mysql_sqlstate(mysql), mysql_error(mysql));
		throw ECCDBException(string(cBuff));
	}

	return (int)mysql_affected_rows(mysql);
}

ECCResultSet * MYSQLI::EXEC_SELECT(string sqlstr) {
	freeResultSet();
	int result = 0;
	char sqlBuff[MYSQL_EXEC_LENTH];
	memset(sqlBuff, 0, MYSQL_EXEC_LENTH);
	if(sqlstr.length()>=MYSQL_EXEC_LENTH)
	{
		sqlstr=sqlstr.substr(0,MYSQL_EXEC_LENTH-1);
	}
	strcpy(sqlBuff, sqlstr.c_str());
	result = mysql_query(mysql, sqlBuff);
	if (result != 0) {
		int myerrno = mysql_errno(mysql);
		if (myerrno < 2028 && myerrno > 2000) {
			ReConnect();
			result = mysql_query(mysql, sqlBuff);
		}
	}
	if (result != 0) {
		char cBuff[4096];
		snprintf(cBuff,4096,"[%s]::Error %d (%s): %s",sqlstr.c_str(),mysql_errno(mysql),mysql_sqlstate(mysql),mysql_error(mysql));
		throw ECCDBException(string(cBuff));
	}

	MYSQL_RES* mysql_res = mysql_store_result(mysql);
	eccResultSet = new MYSQLResultSet(mysql_res);

	//mysql_free_resultt(mysql_res);
	return eccResultSet;
}

MYSQLI::~MYSQLI() {
	if (mysql){
		mysql_close(mysql);
	}

	if (eccResultSet)
		freeResultSet();
}

void MYSQLI::freeResultSet() {
	if (eccResultSet)
		delete eccResultSet;
	eccResultSet = 0;
}
bool MYSQLI::setAutoCommit(bool autoCommit) {
	if (mysql)
		return mysql_autocommit(mysql, autoCommit);

	return false;
}

bool MYSQLI::commit(){
	if(mysql)
		return mysql_commit(mysql);
	return false;
}
bool MYSQLI::rollback(){
	if(mysql)
		return mysql_rollback(mysql);
	return false;
}

